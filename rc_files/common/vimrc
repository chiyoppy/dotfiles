" ------------------------------------------------------------------------------
" Plugins
set runtimepath+=~/.vim/bundle/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.vim/bundle')
  call dein#begin('~/.vim/bundle')

  call dein#add('~/.vim/bundle')
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif

  " Behavior
  call dein#add('junegunn/vim-easy-align')

  " Color & Syntax highlighting
  call dein#add('altercation/vim-colors-solarized')
  call dein#add('itchyny/lightline.vim')
  call dein#add('Yggdroot/indentLine')

  " Language specific plugins
  call dein#add('fatih/vim-go')

  "??
  call dein#add('Shougo/defx.nvim')

  " Completion
  call dein#add('Shougo/deoplete.nvim') " framework
  let g:deoplete#enable_at_startup = 1
  call dein#add('Shougo/neosnippet.vim')
  call dein#add('Shougo/neosnippet-snippets')

  call dein#end()
  call dein#save_state()
endif

filetype plugin indent on
syntax enable


" File Encodings
set encoding=utf-8
set fileencodings=utf-8,cp932,euc-jp

" Behavior
set autoindent
set smartindent
set expandtab
set backspace=indent,eol,start
set nobackup
set writebackup
set history=50
set hlsearch
autocmd BufWritePre * :%s/\s\+$//e " truncate line-tail spaces

"" vim-easy-align
vmap <Enter> <Plug>(EasyAlign)

" Color & Syntax highlighting
set background=dark
try
  colorscheme solarized
catch
endtry
let g:indentLine_color_term = 8

" View
syntax on
set number
set ruler
set wrap
set showcmd
set cursorline
set ignorecase
set showmatch
set laststatus=2
if (exists('+colorcolumn'))
  set colorcolumn=100
  highlight ColorColumn ctermbg = 237
endif

" Tab size
set tabstop=2
set shiftwidth=2
augroup filetypedetect
  au BufNewFile,BufRead *.php setlocal tabstop=4 shiftwidth=4
augroup END

" Completion
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB>
\ pumvisible() ? "\<C-n>" :
\ neosnippet#expandable_or_jumpable() ?
\    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

