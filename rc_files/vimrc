" File Encodings
set encoding=utf-8
set fileencodings=utf-8,euc-jp,cp932

" Behavior
" - vim
set backspace=indent,eol,start
set nobackup
set writebackup
set history=50

" - indent
set smartindent
set tabstop=4
set ts=4
set shiftwidth=4
set expandtab
set autoindent

" - search
set hlsearch

" View
" - general
syntax on
set number
set ruler
set wrap
set showcmd 
set cursorline
set smartcase
set showmatch

"" - colorschehme
"colorscheme molokai
"let g:molokai_original=1

" Pulugin Settings
" - neocomplcache
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'scala' : $HOME . '/.vim/dict/scala.dict',
    \ }

" - neosnippet
"   Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
"   SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"   For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
let g:neosnippet#snippets_directory='~/.vim/snippets'

" - vimsehll
let g:vimshell_interactive_update_time = 10
let g:vimshell_prompt = $USER."% "
"   vimshell map
nmap vs :VimShell<CR>
nmap vp :VimShellPop<CR>

" - make
autocmd FileType scala :compiler sbt
autocmd QuickFixCmdPost make if len(getqflist()) != 0 | copen | endif

" - marker
let g:errormarker_errortext     = '!!'
let g:errormarker_warningtext   = '??'
let g:errormarker_errorgroup    = 'Error'
let g:errormarker_warninggroup  = 'ToDo'

" - TagBar
nmap <F8> :TagbarToggle<CR>

" - NERDTree
nmap <silent> <C-e> :NERDTreeToggle<CR>
vmap <silent> <C-e> <Esc> :NERDTreeToggle<CR>
omap <silent> <C-e> :NERDTreeToggle<CR>
imap <silent> <C-e> <Esc> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let g:NERDTreeShowHidden=1

" - vim-tags
nnoremap <C-]> g<C-]>

" - indent-guides
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 1

" - lightline
set laststatus=2

" Install Application
set nocompatible    " Be iMproved
filetype off        " Required!
if has('vim_starting')
  set runtimepath+=~/.vim/neobundle.vim
  call neobundle#rc(expand('~/.vim/bundle'))
endif

"NeoBundle 'Shougo/neocomplcache.git'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
"NeoBundle 'Shougo/unite.vim.git'
"NeoBundle 'Shougo/vimshell.git'
NeoBundle 'derekwyatt/vim-scala.git'    " Scala syntax coloring
"NeoBundle 'majutsushi/tagbar'
"NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'scrooloose/nerdtree'
"NeoBundle 'szw/vim-tags'
"NeoBundle 'tomasr/molokai.git'
"NeoBundle 'vim-scripts/errormarker.vim.git'
"NeoBundle 'wincent/Command-T'
NeoBundle 'itchyny/lightline.vim'
filetype plugin indent on     " Required!
"   Installation check.
if neobundle#exists_not_installed_bundles()
  echomsg 'Not installed bundles : ' .
        \ string(neobundle#get_not_installed_bundle_names())
  echomsg 'Please execute ":NeoBundleInstall" command.'
endif
